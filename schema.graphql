schema {
  query: Query
  mutation: Mutation
}

type Query {
  getEvents(limit: Int, nextToken: String): EventConnection
  getEvent(id: ID!): Event
}

type Mutation {
  addEvent(input: AddEventInput!): Event
}

input AddEventInput {
  title: String!
  description: String
  location: Location
  start: AWSDateTime!
  end: AWSDateTime!
  allDay: Boolean!
  repeat: EventFrequency!
  type: EventType!
}

interface Node {
  id: ID!
}

type Person implements Node {
  id: ID!
  name: String!
  email: AWSEmail!
  pictureUrl: AWSURL
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Event implements Node {
  id: ID!
  title: String!
  description: String
  location: Location
  start: AWSDateTime!
  end: AWSDateTime!
  status: EventStatus!
  allDay: Boolean!
  isCancelled: Boolean!
  isAuthor: Boolean!
  repeat: EventFrequency!
  type: EventType!
  author: Person!
  comments(limit: Int, nextToken: String): CommentConnection
  group: Group!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type EventConnection {
  events: [Event]
  nextToken: String
}

type CommentConnection {
  comments: [Comment]
  nextToken: String
}

type Location {
  address: String!
  longitude: Float
  latitude: Float
}

enum EventStatus {
  PENDING
  ONGOING
  ENDED
  CANCELLED
}

enum EventFrequency {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum EventType {
  NORMAL
  REMINDER
  TASK
}