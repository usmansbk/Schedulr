schema {
  query: Query
  mutation: Mutation
}

type Query {
  getUser(id: ID!): User

  getEvent(id: ID!): Event
  listAllEvents(limit: Int, nextToken: String): EventConnection
  listGroupEvents(id: ID!, limit: Int, nextToken: String): EventConnection
  listEventComments(id: ID!, limit: Int, nextToken: String): CommentConnection

  getGroup(id: ID!): Group
  listAllGroups(limit: Int, nextToken: String): GroupConnection
  listGroupMembers(id: ID!, limit: Int, nextToken: String): UserConnection

  searchEvent(filter: SearchFilterInput, limit: Int, nextToken: String): EventConnection
  searchGroup(filter: SearchFilterInput, limit: Int, nextToken: String): GroupConnection
}

type Mutation {
  createUser(input: CreateUserInput!): User

  createGroup(input: CreateGroupInput!): Group
  updateGroup(input: UpdateGroupInput!): Group
  deleteGroup(input: DeleteGroupInput!): Group
  joinGroup(input: JoinGroupInput!): Group
  leaveGroup(input: LeaveGroupInput!): Group
  closeGroup(input: CloseGroupInput!): Group
  openGroup(input: OpenGroupInput!): Group

  createEvent(input: CreateEventInput!): Event
  updateEvent(input: UpdateEventInput!): Event
  deleteEvent(input: DeleteEventInput!): Event
  cancelEvent(input: CancelEventInput!): Event
  starEvent(input: StarEventInput!): Event
  unstarEvent(input: UnstarEventInput!): Event

  createComment(input: CreateCommentInput!): Comment
  deleteComment(input: DeleteCommentInput!): Comment
}

type User {
  id: ID!
  name: String!
  email: AWSEmail!
  pictureUrl: AWSURL
  events: [Event]
  groups: [Group]
}

type Group {
  id: ID!
  name: String!
  description: String
  privacy: Privacy!
  status: GroupStatus!
  isMember: Boolean
  isCreator: Boolean
  creator: User
  membersCount: Int
  members: [User]
  events: [Event]
}

type Event {
  id: ID!
  title: String!
  description: String
  location: Location
  start: AWSDateTime!
  end: AWSDateTime!
  allDay: Boolean
  isCancelled: Boolean
  repeat: RepeatEvent!
  eventType: EventType!
  group: Group
  cancelled: [AWSDateTime]
  starsCount: Int
  starred: [User]
  isStarred: Boolean
  isAuthor: Boolean
  author: User
  commentsCount: Int
  comments: [Comment]
}

type Comment {
  id: ID!
  content: String!
  replying: Comment
  isAuthor: Boolean
  event: Event
  author: User
}

type Location {
  id: ID!
  address: String!
  latitude: Float
  longitude: Float
  event: Event
}

type UserConnection {
  nextToken: String
  items: [User]
}

type GroupConnection {
  nextToken: String
  items: [Group]
}

type EventConnection {
  nextToken: String
  items: [Event]
}

type CommentConnection {
  nextToken: String
  items: [Comment]
}

input CreateUserInput {
  id: ID!
  name: String!
  email: AWSEmail!
  pictureUrl: AWSURL
}

input CreateGroupInput {
  name: String!
  description: String
  privacy: Privacy
}

input UpdateGroupInput {
  id: ID!
  name: String
  description: String
  privacy: Privacy
  status: GroupStatus
}

input DeleteGroupInput {
  id: ID!
}

input JoinGroupInput {
  id: ID!
}

input LeaveGroupInput {
  id: ID!
}

input OpenGroupInput {
  id: ID!
}

input CloseGroupInput {
  id: ID!
}

input LocationInput {
  address: String!
  longitude: Float
  latitude: Float
  eventId: ID
}

input CreateEventInput {
  title: String!
  description: String
  location: LocationInput
  start: AWSDateTime!
  end: AWSDateTime!
  allDay: Boolean
  eventType: EventType!
  repeat: RepeatEvent!
  groupId: ID
}

input UpdateEventInput {
  id: ID!
  title: String
  description: String
  location: LocationInput
  start: AWSDateTime
  end: AWSDateTime
  isCancelled: Boolean
  eventType: EventType
  repeat: RepeatEvent
}

input CancelEventInput {
  id: ID!
}

input DeleteEventInput {
  id: ID!
}

input StarEventInput {
  id: ID!
}

input UnstarEventInput {
  id: ID!
}

input CreateCommentInput {
  content: String!
  replyCommentId: ID!
  eventId: ID!
}

input DeleteCommentInput {
  id: ID!
}

input SearchFilterInput {
  query: String!
}

enum GroupStatus {
  OPEN
  CLOSED
}
enum Privacy {
  PUBLIC
  PRIVATE
}
enum RepeatEvent {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
enum EventType {
  TASK
  REMINDER
  NORMAL
}