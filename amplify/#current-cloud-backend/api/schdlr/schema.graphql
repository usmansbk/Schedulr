type User
  @model(subscriptions: null, queries: {get: "getUser"})
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "id"
        identityClaim: "email"
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID
  name: String!
  email: String!
    @auth(rules: [{allow: owner, ownerField: "id", identityClaim: "email"}])
  avatar: S3Object
  pictureUrl: AWSURL
  website: String
  gender: String
  bio: String
  me: Boolean
  following: [Follow]
    @connection(name: "Followings", sortField: "createdAt", limit: 25)
  followingCount: Int
  created: [Schedule]
    @connection(name: "UserSchedules", sortField: "createdAt", limit: 25)
  createdCount: Int
  bookmarks: [Bookmark]
    @connection(name: "UserBookmarks", sortField: "createdAt", limit: 25)
    @auth(rules: [{allow: owner, ownerField: "id", identityClaim: "email"}])
  tickets: [Ticket]
    @connection(name: "UserTickets", sortField: "createdAt", limit: 150)
    @auth(rules: [{allow: owner, ownerField: "id", identityClaim: "email"}])
  preference: UserPreference! @connection
  state: AppState @connection
  createdAt: String
  updatedAt: String
}

type AppState
  @model(
    subscriptions: null
    queries: {get: "state"}
    mutations: {create: "persistState", update: "setState"}
  )
  @auth(rules: [{allow: owner, ownerField: "id", identityClaim: "email"}]) {
  id: ID
  mutedEvents: [ID]
  allowedEvents: [ID]
  mutedSchedules: [ID]
  checkedList: [ID]
  keysToRemove: [String]
}

type UserPreference
  @model(
    subscriptions: null
    queries: {get: "userPref"}
    mutations: {create: "createUserPreference", update: "updateUserPreference"}
  )
  @auth(rules: [{allow: owner, ownerField: "id", identityClaim: "email"}]) {
  id: ID
  userId: ID
  disablePush: Boolean
  disableComments: Boolean
  disableAdminComments: Boolean
  disableReplies: Boolean
  enableMembersComments: Boolean
  language: String
}

type Schedule
  @searchable
  @model(subscriptions: null, queries: {get: "getSchedule"})
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "scheduleAuthorId"
        identityClaim: "email"
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  name: String!
  description: String
  topic: String
  isPublic: Boolean
  isOwner: Boolean
  isFollowing: Boolean
  isOffline: Boolean
  status: ScheduleStatus
  location: String
  geo_point: Location
  followers: [Follow]
    @connection(name: "Followers", sortField: "createdAt", limit: 25)
  followersCount: Int
  events: [Event]
    @connection(name: "ScheduleEvents", sortField: "createdAt", limit: 25)
  eventsCount: Int
  author: User @connection(name: "UserSchedules", sortField: "createdAt")
  picture: S3Object
  createdAt: String
  updatedAt: String
  aws_ds: DeltaAction
}

enum ScheduleStatus {
  CLOSED
  OPEN
}

type Event
  @searchable
  @model(subscriptions: null, queries: {get: "getEvent"})
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "eventAuthorId"
        identityClaim: "email"
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  venue: String
  category: String
  startAt: String!
  endAt: String!
  allDay: Boolean
  banner: S3Object
  recurrence: Recurrence
  until: String
  forever: Boolean
  isPublic: Boolean
  isOwner: Boolean
  isCancelled: Boolean
  isBookmarked: Boolean
  isOffline: Boolean
  cancelledDates: [String]
  author: User @connection
  album: [S3Object]
  schedule: Schedule!
    @connection(name: "ScheduleEvents", sortField: "createdAt")
  comments: [Comment]
    @connection(name: "EventComments", sortField: "createdAt", limit: 20)
  commentsCount: Int
  bookmarks: [Bookmark]
    @connection(name: "EventBookmarks", sortField: "createdAt", limit: 20)
    @auth(
      rules: [
        {allow: owner, ownerField: "eventAuthorId", identityClaim: "email"}
      ]
    )
  tickets: [Ticket]
    @connection(name: "EventTickets", sortField: "createdAt", limit: 150)
    @auth(
      rules: [
        {allow: owner, ownerField: "eventAuthorId", identityClaim: "email"}
      ]
    )
  bookmarksCount: Int
  location: String
  geo_point: Location
  createdAt: String
  updatedAt: String
  aws_ds: DeltaAction
}

enum DeltaAction {
  CREATE
  DELETE
  UPDATE
}

enum Recurrence {
  NEVER
  DAILY
  WEEKLY
  WEEKDAYS
  MONTHLY
  YEARLY
}

type Comment
  @model(subscriptions: null, queries: {get: "getComment"})
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "commentAuthorId"
        identityClaim: "email"
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID
  content: String
  isOwner: Boolean
  isOffline: Boolean
  to: Comment @connection(name: "CommentThread")
  thread: [Comment]
    @connection(name: "CommentThread", sortField: "createdAt", limit: 20)
  at: User @connection
  schedule: Schedule @connection # Better handling of push notification
  event: Event! @connection(name: "EventComments", sortField: "createdAt")
  author: User @connection
  attachment: [S3Object]
  createdAt: String
  updatedAt: String
}

type SearchableEventConnection {
  items: [Event]
  nextToken: String
  total: Int
}

type SearchableScheduleConnection {
  items: [Schedule]
  nextToken: String
  total: Int
}

type Query {
  me: User
  nearbySchedules(
    location: LocationInput!
    km: Int
    limit: Int
    nextToken: String
  ): SearchableScheduleConnection
  nearbyEvents(
    location: LocationInput!
    city: String
    category: String
    km: Int
    limit: Int
    nextToken: String
  ): SearchableEventConnection
  deltaSync(lastSync: String!): Delta @function(name: "QueryDeltaSync-${env}")
  notifications(lastSync: String!): [Notification]
    @function(name: "QueryNotifications-${env}")
}

type S3Object {
  key: String!
  bucket: String!
  region: String!
  type: String
  size: String
  name: String
}

type Location {
  lat: Float!
  lon: Float!
}

input LocationInput {
  lat: Float!
  lon: Float!
}

type Notification {
  id: ID!
  subject: String!
  message: String!
  topic: String
  type: String
  image: S3Object
  timestamp: Int
  entityId: String
  extraData: NotificationExtraData
}

type NotificationExtraData {
  title: String
  content: String
  pictureUrl: AWSURL
  ref: String
}

type Delta {
  events: [Event]
  schedules: [Schedule]
  deletedEvents: [ID]
  deletedSchedules: [ID]
}

type Bookmark
  @model(
    subscriptions: null
    queries: null
    mutations: {create: "createBookmark", delete: "deleteBookmark"}
  )
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "bookmarkUserId"
        identityClaim: "email"
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  event: Event @connection(name: "EventBookmarks", sortField: "createdAt")
  user: User @connection(name: "UserBookmarks", sortField: "createdAt")
  schedule: Schedule @connection
  createdAt: String
}

type Follow
  @model(
    subscriptions: null
    queries: null
    mutations: {create: "createFollow", delete: "deleteFollow"}
  )
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "followUserId"
        identityClaim: "email"
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  schedule: Schedule @connection(name: "Followers", sortField: "createdAt")
  user: User @connection(name: "Followings", sortField: "createdAt")
  createdAt: String
}

type Ticket
  @model(subscriptions: null, queries: null)
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "ticketAttendeeId"
        identityClaim: "email"
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  ticketId: ID!
  event: Event @connection(name: "EventTickets")
  category: TicketCategory @connection(name: "TicketCategory")
  attendee: User @connection(name: "UserTickets")
  purchasedAt: String
  createdAt: String
  updatedAt: String
}

type TicketCategory
  @model(subscriptions: null, queries: null)
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        identityClaim: "email"
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  name: String!
  description: String
  quantity: Int
  price: String
  currency: String
  channel: TicketChannel
  startAt: String
  endAt: String
  minOrder: Int
  maxOrder: Int
  tickets: [Ticket] @connection(name: "TicketCategory", sortField: "createdAt")
  createdAt: String
  updatedAt: String
}

enum TicketChannel {
  Everywhere
  OnlineOnly
  AtDoorOnly
}
