type User
  @model(subscriptions: null, queries: { get: "getUser", list: null })
  @auth(
    rules: [
      { allow: owner, ownerField: "id", operations: [create, update, delete] }
    ])
{
  id: ID!
  name: String!
  email: String!
  avatar: S3Object
  pictureUrl: AWSURL
  website: String
  bio: String
  me: Boolean
  following: [Schedule]
  followingCount: Int
  created: [Schedule]
  createdCount: Int
  bookmarks: [Event]
  preference: UserPreference
  createdAt: String
  updatedAt: String
}

type UserPreference
  @model(subscriptions: null, queries: { get: "userPref" }, mutations: { create: "createUserPreference", update: "updateUserPreference" }) {
  id: ID!
  userId: ID
  disablePush: Boolean
  disableComments: Boolean
  disableAdminComments: Boolean
  disableReplies: Boolean
  enableMembersComments: Boolean
}

type Schedule
  @model(subscriptions: null, queries: { get: "getSchedule" })
 {
  id: ID!
  name: String!
  description: String
  isPublic: Boolean
  isOwner: Boolean
  isFollowing: Boolean 
  status: ScheduleStatus 
  location: String
  followers: [User]
  followersCount: Int
  events: [Event]
  eventsCount: Int
  author: User!
  picture: S3Object
  createdAt: String
  updatedAt: String
  aws_ds: DeltaAction
}

enum ScheduleStatus {
  CLOSED
  OPEN
}

type Event
  @model(subscriptions: null, queries: { get: "getEvent" }) {
  id: ID!
  title: String!
  description: String
  venue: String
  category: String
  startAt: String!
  endAt: String!
  allDay: Boolean
  banner: S3Object
  recurrence: Recurrence
  until: String
  forever: Boolean
  isPublic: Boolean
  isOwner: Boolean
  isCancelled: Boolean
  isBookmarked: Boolean
  cancelledDates: [String]
  author: User!
  schedule: Schedule!
  comments: [Comment]
  commentsCount: Int
  bookmarks: [User]
  bookmarksCount: Int
  location: String
  geo_point: Location
  createdAt: String
  updatedAt: String
  aws_ds: DeltaAction
}

enum DeltaAction {
  CREATE
  DELETE
  UPDATE
}

enum Recurrence {
  NEVER
  DAILY
  WEEKLY
  WEEKDAYS
  MONTHLY
  YEARLY
}

type Comment
  @model {
  id: ID!
  content: String
  isOwner: Boolean
  to: Comment
  event: Event
  author: User
  createdAt: String
  updatedAt: String
}

type Query {
  nearbyEvents(location: LocationInput!, km: Int, limit: Int, nextToken: String): [Event]
  deltaSync(lastSync: String!): Delta
  notifications(lastSync: String!): [Notification]
}

type S3Object {
  key: String!
  bucket: String!
  region: String!
}

type Location {
  lat: Float!
  lon: Float!
}

input LocationInput {
  lat: Float!
  lon: Float!
}

type Notification {
  id: ID!
  subject: String!
  message: String!
  topic: String
  type: String
  image: S3Object
  timestamp: Int
  entityId: String
  extraData: NotificationExtraData
}

type NotificationExtraData {
  title: String
  content: String
  pictureUrl: AWSURL 
}

type Delta {
  events: [Event]
  schedules: [Schedule]
}